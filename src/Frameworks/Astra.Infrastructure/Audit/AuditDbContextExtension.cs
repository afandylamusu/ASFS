using Astra.Core.Interfaces;
using Astra.Core.SharedKernel;
using Astra.Infrastructure.AuditTrail;
using Astra.Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Astra.Infrastructure.Audit
{
    public static class AuditDbContextExtension
    {
        public static IEnumerable<DbEntityEntry<BaseEntity>> GetEntityToTrack(this DbContext context)
        {
            var statesToTrack = new List<EntityState> { EntityState.Added, EntityState.Deleted, EntityState.Modified };
            return context.ChangeTracker.Entries<BaseEntity>()
                .Where(e => statesToTrack.Contains(e.State))
                .Select(e => e)
                .ToList();
        }

        public static async Task AuditSaveChanges(this AuditDbContext auditContext, IEnumerable<DbEntityEntry<BaseEntity>> entries)
        {
            if (entries.Any())
            {
                foreach (var item in entries)
                {
                    auditContext.Audits.Add(new EntityAudit
                    {
                        EntityName = item.Entity.GetType().Name,
                        Key = item.Entity.Id,
                        Action = item.State.ToString(),
                        Active = true,
                        RevisionStampUtc = DateTime.UtcNow,
                        ByUser = "System"
                    });
                }

                await auditContext.SaveChangesAsync();
            }

            await Task.Yield();
        }

        public static async Task OnAfterSaveChanges(this DbContext context, IList<AuditEntry> auditEntries, IAuditTrailProvider<AuditEntityLog> auditTrailProvider)
        {
            if (auditEntries == null || auditEntries.Count == 0)
            {
                await Task.Yield();
                return;
            }

            foreach (var auditEntry in auditEntries)
            {
                var keyProps = context.GetKeyNames(auditEntry.Entry);
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (keyProps.Contains(prop.Name))
                    {
                        auditEntry.KeyValues[prop.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                //AuditLogs.Add(auditEntry.ToAudit());
                auditTrailProvider.AddLog(auditEntry.ToAudit());
            }

            await Task.Yield();
        }

        public static List<AuditEntry> OnBeforeSaveChanges(this DbContext context)
        {
            context.ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in context.ChangeTracker.Entries())
            {
                if (entry.Entity is AuditEntityLog || !(entry.Entity is IAuditTrail) || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;


                var auditEntry = new AuditEntry(entry)
                {
                    EntityName = entry.Entity.GetType().Name,
                    Action = entry.State.ToString()
                };
                //auditEntry.User 
                auditEntries.Add(auditEntry);

                var properties = entry.Properties();

                var keyValues = context.GetKeyNames(entry);

                foreach (var property in properties)
                {
                    if (!property.IsModified)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Name;
                    if (keyValues.Contains(propertyName))
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            //foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            //{
            //    //AuditLogs.Add(auditEntry.ToAudit());
            //}

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

    }
}
